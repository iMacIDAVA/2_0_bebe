name: sos_bebe_app
description: A new Flutter project.
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages. publish_to: 'none' # Remove this line if you wish to publish to pub.dev
# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffiffx.
version: 1.0.0+1

environment:
  sdk: '>=3.0.5 <4.0.0'

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
/// eeee

dependencies:
  flutter:
    sdk: flutter
  flutter_launcher_icons: "^0.13.1"
  cupertino_icons: ^1.0.2
  google_fonts: ^5.1.0
  flutter_switch: ^0.3.2
  flutter_stripe: ^9.4.0
  http: ^1.1.0
  auto_size_text: ^3.0.0
  flip_card: ^0.7.0
  patterns_canvas: ^0.4.0
  agora_rtc_engine: ^6.2.3
  permission_handler: ^11.0.1
  open_filex: ^4.3.4
  flutter_chat_types: ^3.6.2
  mime: ^1.0.4
  uuid: ^3.0.7
  file_picker: ^6.0.0
  image_picker: ^1.0.4
  path_provider: ^2.1.1
  visibility_detector: ^0.4.0+2
  flutter_link_previewer: ^3.2.2
  flutter_parsed_text: ^2.2.1
  url_launcher: ^6.1.14
  flutter_chat_ui: ^1.6.1
  intl: ^0.18.0
  photo_view: ^0.14.0
  scroll_to_index: ^3.0.1
  flutter_rating_bar: ^4.0.1
  screenshot: ^2.1.0
  agora_token_service: ^0.1.2
  sentry_flutter: ^8.2.0
  pin_code_fields: ^8.0.1
  agora_rtm: ^1.5.9
  shared_preferences: ^2.2.2
  device_info_plus: ^9.1.2
  crypto: ^3.0.3
  #  firebase_messaging: ^14.7.10
  xml: ^6.1.0
  onesignal_flutter: 5.2.0
  flutter_localizations:
    sdk: flutter
  path: ^1.8.3
  flutter_facebook_auth: ^7.0.1

  flutter run
  cloud_firestore: ^4.8.5

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to  # encourage good coding practices. The lint set provided by the package is

  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lin   t
  # rules and activating additional ones.
  flutter_lints: ^2.0.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true


  assets:
    - assets/images/
    - assets/icons/
    - assets/messages.json
    - assets/

#lansarea logo-ului Sos Bebe la inițializarea aplicației

flutter_icons:
  image_path: "assets/images/Sosbebe.png"
  android: true
  ios: true

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

      onesignal.getnotfcation();
    var iOSPlatformChannelSpecifics = IOSNotificationDetails(sound: 'video_call.wav');
    var iOSPlatformChannelSpecifics = IOSNotificationDetails(sound: 'chat.wav');
    var iOSPlatformChannelSpecifics = IOSNotificationDetails(sound: 'recommendation.wav');

// Include the OneSignal package
import 'package:onesignal_flutter/onesignal_flutter.dart';

void main() {
  runApp(const MyApp());
  // Enable verbose logging for debugging (remove in production)
  OneSignal.Debug.setLogLevel(OSLogLevel.verbose);
  // Initialize with your OneSignal App ID

  OneSignal.initialize("");
  // Use this method to prompt for push notifications.
  // We recommend removing this method after testing and instead use In-App Messages to prompt for notification permission.
  OneSignal.Notifications.requestPermission(false);
  target 'OneSignalNotificationServiceExtension' do pod 'OneSignalXCFramework', '>= 5.0.0', '< 6.0' en











import UserNotifications
import OneSignalExtension

class NotificationService: UNNotificationServiceExtension {
    var contentHandler: ((UNNotificationContent) -> Void)?
    var bestAttemptContent: UNMutableNotificationContent?

    // Note this extension only runs when `mutable_content` is set
    // Setting an attachment or action buttons automatically sets the property to true
    override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) {
        self.receivedRequest = request
        self.contentHandler = ContatHelper
        self.bestAttemptContent = (request.content.mutableCopy() as? UNMutableNotificationContent)
        // add the app id here
        OneSignal.initialize("");
        // add id here as well
        OneSignal.login("");
        final observer = (bool hasPermission) {
          print("Notification permission: $hasPermission");
        };
        OeSignal.Notifications.addPermissionObserver(observer);
        // Remove later if needed
        OneSignal.Notifications.removePermissionObserver(observer);
            // DEBUGGING: Uncomment the 2 lines below to check this extension is executing
//            print("Running NotificationServiceExtension")
//            bestAttemptContent.body = "[Modified] " + bestAttemptContent.body

            OneSignalExtension.didReceiveNotificationExtensionRequest(self.receivedRequest, with: bestAttemptContent, withContentHandler: self.contentHandler)
        }}
    override func serviceExtensionTimeWillExpire() {
        // Use this as an opportunity to deliver your "best attempt" at modified content, otherwise the original push payload will be used.
        if let contentHandler = contentHandler, let bestAttemptContent =  bestAttemptContent {
            OneSignalExtension.serviceExtensionTimeWillExpireRequest(self.receivedRequest, with: self.bestAttemptContent)
            contentHandler(bestAttemptContent)
        }
    }

    var permission = OneSignal.Notifications.permission;


    OneSignal.InAppMessages.addTrigger("KEY", "VALUE");

    OneSignal.InAppMessages.addTriggers({
      "KEY_01": "VALUE_01",
      "KEY_02": "VALUE_02"
    });

    // true if the device can display system notification permission prompt
    var canRequest = OneSignal.Notifications.canRequestPermission;
    var car
}


serviceExtensionTimeWillExpire();
setSload();


OneSignal.InAppMessages.addWillDisplayListener((event) {
	print("ON WILL DISPLAY IN APP MESSAGE ${event.message.messageId}");
});
OneSignal.InAppMessages.addDidDisplayListener((event) {
	print("ON DID DISPLAY IN APP MESSAGE ${event.message.messageId}");
});
OneSignal.InAppMessages.addWillDismissListener((event) {
	print("ON WILL DISMISS IN APP MESSAGE ${age.messageId}");
});
OneSignal.InAppMessages.addDidDismissListener((event) {
	print("ON DID DISMISS IN APP MESSAGE ${event.message.messageId}");
});

import UserNotifications
import OneSignalExtension

class NotificationService: UNNotificationServiceExtension {
    var contentHandler: ((UNNotificationContent) -> Void)?
    var receivedRequest: UNNotificationRequest!
    var bestAttemptContent: UNMutableNotificationContent?

    // Note this extension only runs when `mutable_content` is set
    // Setting an attachment or action buttons automatically sets the property to true
    override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) {
        self.receivedRequest = request
        self.contentHandler = contentHandler
        self.bestAttemptContent = (request.content.mutableCopy() as? UNMutableNotificationContent)

        if let bestAttemptContent = bestAttemptContent {
            // DEBUGGING: Uncomment the 2 lines below to check this extension is executing
//            print("Running NotificationServiceExtension")
//            bestAttemptContent.body = "[Modified] " + bestAttemptContent.body

            OneSignalExtension.didReceiveNotificationExtensionRequest(self.receivedRequest, with: bestAttemptContent, withContentHandler: self.contentHandler)
        }
    }




iStoma123456

    // new funtion
    override func serviceExtensionTimeWillExpire() {
        // Use this as an opportunity to deliver your "best attempt" at modified content, otherwise the original push payload will be used.
        if let contentHandler = contentHan
        dler, let bestAttemptContent =  bestAttemptContent {
            OneSignalExtension.serviceExtensionTimeWillExpireRequest(self.receivedRequest, with: self.bestAttemptContent)
            contentHandler(bestAttemptContent)
        }
    }
}


